// Prisma schema for MongoDB

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")  // Ensure DATABASE_URL is set in .env
}

generator client {
  provider = "prisma-client-js"
}

// Enum for Service Status
enum Status {
  Agreement
  Submitted
  Finger_Done
  Police_Report_Done
  BackEnd_Verification_Done
  Printing
  Shipped
  Ready_For_Delivery
  Delivered
}

// User Table
model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  address          String
  number           String
  email            String     @unique
  password         String
  otp              String     @default("0")
  subscriptionTime DateTime
  activationDate   DateTime
  active           Boolean    @default(true)
  customers        Customer[] @relation
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

// Customer Table
model Customer {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String
  phone          String
  balance        Float
  services       Service[]     @relation
  paidHistories  PaidHistory[] @relation
  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

// ServiceName Table
model ServiceName {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  services Service [] @relation
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Service Table
model Service {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceNameId  String @db.ObjectId
  serviceName   ServiceName @relation(fields: [serviceNameId], references: [id])
  cost         Float
  customerId   String   @db.ObjectId
  customer     Customer @relation(fields: [customerId], references: [id])
  deliveryDate DateTime
  status       Status
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// PaidHistory Table
model PaidHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  date       DateTime
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
